import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class HtmlTableToExcelConverter {

    public static void convertHtmlTableToExcel(String htmlFilePath, String outputExcelPath) throws IOException {
        // Parse HTML file
        File input = new File(htmlFilePath);
        Document doc = Jsoup.parse(input, "UTF-8");

        // Create a new Excel workbook
        Workbook workbook = new XSSFWorkbook();
        
        // Get all tables from the HTML
        Elements tables = doc.select("table");
        
        // Create a sheet for each table
        for (int i = 0; i < tables.size(); i++) {
            Element table = tables.get(i);
            Sheet sheet = workbook.createSheet("Table " + (i + 1));
            
            // Process each row in the table
            Elements rows = table.select("tr");
            int rowNum = 0;
            
            for (Element row : rows) {
                Row excelRow = sheet.createRow(rowNum++);
                
                // Process each cell in the row
                Elements cells = row.select("td, th"); // Include both td and th elements
                int cellNum = 0;
                
                for (Element cell : cells) {
                    Cell excelCell = excelRow.createCell(cellNum++);
                    
                    // Set cell value
                    String text = cell.text().trim();
                    excelCell.setCellValue(text);
                    
                    // Apply basic styling for header cells (th)
                    if (cell.tagName().equalsIgnoreCase("th")) {
                        CellStyle headerStyle = workbook.createCellStyle();
                        Font headerFont = workbook.createFont();
                        headerFont.setBold(true);
                        headerStyle.setFont(headerFont);
                        excelCell.setCellStyle(headerStyle);
                    }
                    
                    // Handle rowspan and colspan if needed
                    int colspan = cell.hasAttr("colspan") ? Integer.parseInt(cell.attr("colspan")) : 1;
                    if (colspan > 1) {
                        // Note: Merging cells might require additional logic
                        sheet.addMergedRegion(new CellRangeAddress(
                            rowNum - 1, rowNum - 1,
                            cellNum - 1, cellNum - 1 + colspan - 1
                        ));
                    }
                }
            }
            
            // Auto-size columns for better visibility
            for (int j = 0; j < sheet.getRow(0).getLastCellNum(); j++) {
                sheet.autoSizeColumn(j);
            }
        }
        
        // Write the output to a file
        try (FileOutputStream outputStream = new FileOutputStream(outputExcelPath)) {
            workbook.write(outputStream);
        }
        
        workbook.close();
    }

    public static void main(String[] args) {
        try {
            // Example usage
            convertHtmlTableToExcel("input.html", "output.xlsx");
            System.out.println("Conversion completed successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}