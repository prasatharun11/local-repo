javascript:(function(){
  const loadScript = (url, callback) => {
    const script = document.createElement('script');
    script.src = url;
    script.onload = callback;
    document.head.appendChild(script);
  };

  loadScript('https://cdnjs.cloudflare.com/ajax/libs/pako/2.1.0/pako.min.js', function() {
    const input = prompt("Paste your Base64 Gzip encoded string:");
    if (!input) return;

    try {
      const binaryString = atob(input.replace(/\s/g, ''));
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      const decompressed = pako.ungzip(bytes, { to: 'string' });

      let output;
      try {
        // Try parsing as JSON first
        output = JSON.parse(decompressed);
        if (typeof output === 'string') {
          output = JSON.parse(output); // Handle double-encoded JSON
        }
        output = JSON.stringify(output, null, 2);
      } catch (e) {
        // If not JSON, try parsing as URL-encoded string
        if (decompressed.includes('=') && decompressed.includes('&')) {
          const params = new URLSearchParams(decompressed);
          const obj = {};
          params.forEach((value, key) => {
            // Handle multiple values for same key
            if (obj.hasOwnProperty(key)) {
              if (Array.isArray(obj[key])) {
                obj[key].push(value);
              } else {
                obj[key] = [obj[key], value];
              }
            } else {
              obj[key] = value;
            }
          });
          output = JSON.stringify(obj, null, 2);
        } else {
          output = decompressed; // Fallback to raw output
        }
      }

      // Create display window
      const win = window.open('', '_blank', 'width=600,height=400');
      win.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>Decoded Output</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
            pre { 
              background: white; 
              padding: 15px; 
              border-radius: 5px; 
              border: 1px solid #ddd; 
              white-space: pre-wrap; 
              word-break: break-word;
              max-height: 300px;
              overflow-y: auto;
            }
            .button { 
              padding: 8px 15px; 
              margin-right: 10px; 
              border: none; 
              border-radius: 4px; 
              cursor: pointer; 
              font-weight: bold;
            }
            .copy-btn { background: #4CAF50; color: white; }
            .close-btn { background: #f44336; color: white; }
          </style>
        </head>
        <body>
          <h2>Decoded Output</h2>
          <pre id="output">${output.replace(/[<>&]/g, function(m) {
            return {'<':'&lt;','>':'&gt;','&':'&amp;'}[m];
          })}</pre>
          <div>
            <button class="button copy-btn" onclick="
              navigator.clipboard.writeText(document.getElementById('output').innerText);
              this.textContent = 'Copied!';
              setTimeout(() => this.textContent = 'Copy', 2000);
            ">Copy</button>
            <button class="button close-btn" onclick="window.close()">Close</button>
          </div>
        </body>
        </html>
      `);
      win.document.close();

    } catch (error) {
      alert("Error processing input:\n" + error.message);
    }
  });
})();