I'll rewrite this OSHA 300 form generation logic using Apache POI for XLSX format. Here's the complete implementation:

```java
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.ss.SpreadsheetVersion;
import java.io.*;
import java.util.*;
import java.text.SimpleDateFormat;

@SuppressWarnings("unused")
public void createOSHA300FormsExcel(ExcelInputVO dataVO, String filePath, ResultVO customLabelResultVO, String configPath) throws Exception {
    Workbook workbook = null;
    FileInputStream templateStream = null;
    
    try {
        // Load template
        templateStream = new FileInputStream(configPath + "template300.xlsx");
        workbook = new XSSFWorkbook(templateStream);
        
        int rowCount = dataVO.getNumberOfRows();
        int SHEET_300_EXCEL_BASE_ROW = 24;
        
        // Strings for data storage
        String strBranchCaseSymbol = null;
        String strBranch = null;
        String strCase = null;
        String strSymbol = null;
        String strDeptName = null;
        String strClaimt = null;
        String strLossDate = null;
        String strNatureInj = null;
        String strInjDesc = null;
        String strCauseCode = null;
        String strBodyPartDesc = null;
        String strDeathDate = null;
        String strOccupation = null;
        String strLossDays = null;
        String strJobTitle = null;
        String strInjuryIllnessDesc = null;
        String strAccidentLocationText = null;
        String strOutcomeCode = null;
        String strDaysAwayFromWork = null;
        String strRestrictedDays = null;
        String strInjIllnessType = null;
        
        String strDiv = null;
        String strLoc = null;
        String strDept = null;
        String strSec = null;
        String strLevel5 = "";
        String strLevel6 = "";
        String strDivNm = "";
        String strLocNm = "";
        String strDeptNm = "";
        String strSecNm = "";
        String strLevel5Nm = "";
        String strLevel6Nm = "";
        final String NO_DESC = "No Description";
        final String EXCEL_SIGN = "X";
        
        // Get main sheet
        Sheet mainSheet = workbook.getSheetAt(0);
        workbook.setSheetName(0, "OSHA Form 300");
        
        // Get or create subtotal sheet
        Sheet subTotalSheet = workbook.getSheet("SubTotal");
        if (subTotalSheet == null) {
            subTotalSheet = workbook.createSheet("SubTotal");
        }
        
        // Process custom labels
        ArrayList<IValueObject> customLabelsList = (ArrayList<IValueObject>) customLabelResultVO.getRows(0);
        int firstDLDSColumnPosition = 18;
        
        for (int q = 0; q < 6; q++) {
            CustomLabelOutputVO locVO = (CustomLabelOutputVO) customLabelsList.get(q);
            Row row = mainSheet.getRow(17); // Row 18 (0-based)
            if (row == null) row = mainSheet.createRow(17);
            
            Cell cell = row.createCell(firstDLDSColumnPosition);
            cell.setCellValue(locVO.getIQSRLabel());
            
            CellStyle verticalBottomStyle = workbook.createCellStyle();
            verticalBottomStyle.setVerticalAlignment(VerticalAlignment.BOTTOM);
            for (int r = 17; r <= 21; r++) { // Rows 18-22
                Row currentRow = mainSheet.getRow(r);
                if (currentRow == null) currentRow = mainSheet.createRow(r);
                Cell currentCell = currentRow.createCell(firstDLDSColumnPosition);
                currentCell.setCellStyle(verticalBottomStyle);
            }
            firstDLDSColumnPosition++;
        }
        
        int excelCurrRow = SHEET_300_EXCEL_BASE_ROW;
        int pageSize = 10;
        int rowNumber = 0;
        int pageNumber = 0;
        boolean isMorePage = false;
        int blankLineCount = 0;
        
        // Store row heights for template rows
        Map<Integer, Integer> rowHeights = new HashMap<>();
        for (int i = 24; i <= 35; i++) {
            Row templateRow = mainSheet.getRow(i);
            if (templateRow != null) {
                rowHeights.put(i, (int) templateRow.getHeight());
            }
        }
        
        // Main data processing loop
        for (int rowPos = 0; rowPos < rowCount; rowPos++) {
            Object row_ = dataVO.get(rowPos);
            if (row_ instanceof List<?>) {
                List<?> row = (List<?>) row_;
                
                // Extract and format data
                String tmpStr = "000" + (String) row.get(0);
                strBranch = tmpStr.substring(tmpStr.length() - 3);
                
                tmpStr = "000000" + (String) row.get(1);
                strCase = tmpStr.substring(tmpStr.length() - 6);
                
                tmpStr = "000" + (String) row.get(2);
                strSymbol = tmpStr.substring(tmpStr.length() - 3);
                
                strClaimt = Utilities.getString((String) row.get(4));
                strLossDate = Utilities.getString((String) row.get(5));
                strNatureInj = Utilities.getString((String) row.get(6));
                strInjDesc = Utilities.getString((String) row.get(7));
                strCauseCode = Utilities.getString((String) row.get(8));
                strBodyPartDesc = Utilities.getString((String) row.get(9));
                strDeathDate = Utilities.getString((String) row.get(10));
                strOccupation = Utilities.getString((String) row.get(13));
                strLossDays = Utilities.getString((String) row.get(15));
                strJobTitle = Utilities.getString((String) row.get(16));
                strInjuryIllnessDesc = Utilities.getString((String) row.get(17));
                
                if (strInjuryIllnessDesc.equals("")) {
                    if (!strInjDesc.equals(""))
                        strInjuryIllnessDesc = strInjDesc;
                    else
                        strInjuryIllnessDesc = strNatureInj + "- DESC N/A";
                }
                
                strAccidentLocationText = Utilities.getString((String) row.get(18));
                strOutcomeCode = Utilities.getString((String) row.get(19));
                strDaysAwayFromWork = Utilities.getString((String) row.get(20));
                strRestrictedDays = Utilities.getString((String) row.get(21));
                strInjIllnessType = Utilities.getString((String) row.get(22));
                
                strDiv = Utilities.getString((String) row.get(23));
                strLoc = Utilities.getString((String) row.get(24));
                strDept = Utilities.getString((String) row.get(25));
                strSec = Utilities.getString((String) row.get(26));
                strLevel5 = Utilities.getString((String) row.get(27));
                strLevel6 = Utilities.getString((String) row.get(28));
                strDivNm = Utilities.getString((String) row.get(29));
                strLocNm = Utilities.getString((String) row.get(30));
                strDeptNm = Utilities.getString((String) row.get(31));
                strSecNm = Utilities.getString((String) row.get(32));
                strLevel5Nm = Utilities.getString((String) row.get(33));
                strLevel6Nm = Utilities.getString((String) row.get(34));
                
                // Determine department name with fallback logic
                strDeptName = determineDepartmentName(strLevel6Nm, strLevel5Nm, strSecNm, strDeptNm, strLocNm, strDivNm, NO_DESC);
                
                strBranchCaseSymbol = strBranch + "-" + strCase + "-" + strSymbol;
                
                // Create or get current row
                Row currentRow = mainSheet.getRow(excelCurrRow);
                if (currentRow == null) {
                    currentRow = mainSheet.createRow(excelCurrRow);
                    currentRow.setHeight((short) 330); // Default height
                }
                
                // Apply left alignment style
                CellStyle leftAlignStyle = workbook.createCellStyle();
                leftAlignStyle.setAlignment(HorizontalAlignment.LEFT);
                
                // Column 0: Branch-Case-Symbol
                Cell cell0 = currentRow.createCell(0);
                cell0.setCellValue(strBranchCaseSymbol);
                cell0.setCellStyle(leftAlignStyle);
                
                // Column 1: Employee Name
                Cell cell1 = currentRow.createCell(1);
                cell1.setCellValue(strClaimt);
                cell1.setCellStyle(leftAlignStyle);
                
                // Column 2: Job Title/Occupation
                Cell cell2 = currentRow.createCell(2);
                String jobTitleValue = (!strJobTitle.equals("") && !strJobTitle.equals(" ")) ? strJobTitle : strOccupation;
                cell2.setCellValue(jobTitleValue);
                cell2.setCellStyle(leftAlignStyle);
                
                // Column 3: Date of Injury
                Cell cell3 = currentRow.createCell(3);
                cell3.setCellValue(strLossDate);
                cell3.setCellStyle(leftAlignStyle);
                
                // Column 4: Where the event occurred
                Cell cell4 = currentRow.createCell(4);
                String accidentLocation = determineAccidentLocation(strAccidentLocationText, strDeptName, strLocNm);
                cell4.setCellValue(accidentLocation);
                cell4.setCellStyle(leftAlignStyle);
                
                // Column 5: Injury description (with word wrap)
                Cell cell5 = currentRow.createCell(5);
                CellStyle wordWrapStyle = workbook.createCellStyle();
                wordWrapStyle.setAlignment(HorizontalAlignment.LEFT);
                wordWrapStyle.setWrapText(true);
                cell5.setCellValue(strInjuryIllnessDesc);
                cell5.setCellStyle(wordWrapStyle);
                
                // Process injury/illness type and outcome codes
                processInjuryIllnessType(currentRow, strInjIllnessType, strNatureInj, EXCEL_SIGN, workbook);
                processOutcomeCode(currentRow, strOutcomeCode, strDaysAwayFromWork, strRestrictedDays, 
                                 strInjIllnessType, strDeathDate, strLossDays, EXCEL_SIGN, workbook);
                
                // Department location data (columns 18-23)
                CellStyle rightAlignStyle = workbook.createCellStyle();
                rightAlignStyle.setAlignment(HorizontalAlignment.RIGHT);
                
                Cell cell18 = currentRow.createCell(18);
                cell18.setCellValue(strDiv);
                cell18.setCellStyle(rightAlignStyle);
                
                Cell cell19 = currentRow.createCell(19);
                cell19.setCellValue(strLoc);
                cell19.setCellStyle(rightAlignStyle);
                
                Cell cell20 = currentRow.createCell(20);
                cell20.setCellValue(strDept);
                cell20.setCellStyle(rightAlignStyle);
                
                Cell cell21 = currentRow.createCell(21);
                cell21.setCellValue(strSec);
                cell21.setCellStyle(rightAlignStyle);
                
                Cell cell22 = currentRow.createCell(22);
                cell22.setCellValue(strLevel5);
                cell22.setCellStyle(rightAlignStyle);
                
                Cell cell23 = currentRow.createCell(23);
                cell23.setCellValue(strLevel6);
                cell23.setCellStyle(rightAlignStyle);
                
                rowNumber++;
                
                // Handle pagination every 10 rows
                if (rowNumber % pageSize == 0) {
                    handlePagination(workbook, mainSheet, subTotalSheet, excelCurrRow, pageSize, 
                                   rowHeights, pageNumber, rowCount);
                    pageNumber++;
                    excelCurrRow += pageSize + 12; // Move to next page position
                    isMorePage = true;
                    blankLineCount++;
                }
                
                // Insert new row for next record
                mainSheet.shiftRows(excelCurrRow, mainSheet.getLastRowNum(), 1);
                excelCurrRow++;
                
                // Copy format from template row
                copyRowFormat(mainSheet, excelCurrRow, mainSheet.getRow(SHEET_300_EXCEL_BASE_ROW), workbook);
            }
        }
        
        // Handle remaining rows that don't fill a complete page
        int remainingRows = rowCount % pageSize;
        if (remainingRows > 0) {
            handleRemainingRows(workbook, mainSheet, subTotalSheet, excelCurrRow, remainingRows, 
                              rowHeights, pageNumber, rowCount);
        }
        
        // Final cleanup and formatting
        cleanupWorkbook(workbook, mainSheet, isMorePage, blankLineCount, pageSize, pageNumber);
        
        // Set print area and save
        setPrintArea(mainSheet, pageSize, pageNumber);
        
        // Save the workbook
        try (FileOutputStream out = new FileOutputStream(filePath)) {
            workbook.write(out);
        }
        
    } finally {
        if (templateStream != null) {
            templateStream.close();
        }
        if (workbook != null) {
            workbook.close();
        }
    }
}

// Helper methods
private String determineDepartmentName(String level6, String level5, String sec, String dept, String loc, String div, String noDesc) {
    if (!level6.equals("") && !level6.equalsIgnoreCase(noDesc)) return level6;
    if (!level5.equals("") && !level5.equalsIgnoreCase(noDesc)) return level5;
    if (!sec.equals("") && !sec.equalsIgnoreCase(noDesc)) return sec;
    if (!dept.equals("") && !dept.equalsIgnoreCase(noDesc)) return dept;
    if (!loc.equals("") && !loc.equalsIgnoreCase(noDesc)) return loc;
    return div;
}

private String determineAccidentLocation(String accidentText, String deptName, String locName) {
    if (!accidentText.equals("")) return accidentText;
    if (!locName.equals("")) return locName;
    return deptName;
}

private void processInjuryIllnessType(Row row, String injType, String natureInj, String excelSign, Workbook workbook) {
    if (injType.equals("0")) {
        createCellWithValue(row, 12, excelSign, workbook);
    } else if (injType.equals("1")) {
        createCellWithValue(row, 13, excelSign, workbook);
    } else if (injType.equals("2")) {
        createCellWithValue(row, 14, excelSign, workbook);
    } else if (injType.equals("3")) {
        createCellWithValue(row, 15, excelSign, workbook);
    } else if (injType.equals("4")) {
        createCellWithValue(row, 16, excelSign, workbook);
    } else if (injType.equals("5")) {
        createCellWithValue(row, 17, excelSign, workbook);
    } else if (natureInj != null && !natureInj.isEmpty()) {
        // Injury code mapping logic
        String[] injuryCodesOSHA = {"DMS", "ABR", "BLR", "BYR", "RCR", "SIR", "CPP", "PMP", "POP", "ERP", 
                                   "HLH", "HCH", "HDH", "5HA", "OOA", "CNA", "CDA", "OLA"};
        
        String injGroup = "";
        for (String code : injuryCodesOSHA) {
            if (code.startsWith(natureInj)) {
                injGroup = code.substring(2);
                break;
            }
        }
        
        switch (injGroup) {
            case "S": createCellWithValue(row, 13, excelSign, workbook); break;
            case "R": createCellWithValue(row, 14, excelSign, workbook); break;
            case "P": createCellWithValue(row, 15, excelSign, workbook); break;
            case "H": createCellWithValue(row, 16, excelSign, workbook); break;
            case "A": createCellWithValue(row, 17, excelSign, workbook); break;
            default: createCellWithValue(row, 12, excelSign, workbook); break;
        }
    }
}

private void processOutcomeCode(Row row, String outcomeCode, String daysAway, String restrictedDays, 
                              String injType, String deathDate, String lossDays, String excelSign, Workbook workbook) {
    if (outcomeCode.equals("0")) {
        createCellWithValue(row, 6, excelSign, workbook);
    } else if (outcomeCode.equals("1")) {
        createCellWithValue(row, 7, excelSign, workbook);
        createCellWithValue(row, 10, daysAway, workbook);
        createCellWithValue(row, 11, restrictedDays, workbook);
    } else if (outcomeCode.equals("2")) {
        createCellWithValue(row, 8, excelSign, workbook);
        createCellWithValue(row, 11, restrictedDays, workbook);
    } else if (outcomeCode.equals("3") || 
              (injType != null && !injType.isEmpty() && Integer.parseInt(injType) >= 0 && Integer.parseInt(injType) <= 5)) {
        createCellWithValue(row, 9, excelSign, workbook);
    } else if (deathDate != null && !deathDate.isEmpty() && deathDate.length() >= 4) {
        String year = deathDate.substring(0, 4);
        try {
            int yearInt = Integer.parseInt(year);
            if (yearInt < 9999) {
                createCellWithValue(row, 6, excelSign, workbook);
            }
        } catch (NumberFormatException e) {
            // Ignore invalid death date format
        }
    }
    
    if (lossDays != null && !lossDays.isEmpty()) {
        try {
            int lossDaysInt = Integer.parseInt(lossDays);
            if (lossDaysInt > 0) {
                createCellWithValue(row, 7, excelSign, workbook);
                createCellWithValue(row, 10, "", workbook);
            }
        } catch (NumberFormatException e) {
            // Ignore invalid loss days format
        }
    }
}

I'll complete these methods with proper logic. Here's the full implementation:

```java
private void handlePagination(Workbook workbook, Sheet mainSheet, Sheet subTotalSheet, 
                            int startRow, int pageSize, Map<Integer, Integer> rowHeights, 
                            int pageNumber, int totalRows) {
    try {
        // Add page separator with template formatting
        int separatorStartRow = startRow + pageSize;
        
        // Set row heights for separator rows (matching template rows 25-35)
        for (int i = 0; i <= 11; i++) {
            int templateRowNum = 25 + i;
            int targetRowNum = separatorStartRow + i;
            Row targetRow = mainSheet.getRow(targetRowNum);
            if (targetRow == null) {
                targetRow = mainSheet.createRow(targetRowNum);
            }
            if (rowHeights.containsKey(templateRowNum)) {
                targetRow.setHeight(rowHeights.get(templateRowNum).shortValue());
            }
        }
        
        // Copy separator content from template rows (25-35)
        Row templateSeparatorRow = mainSheet.getRow(25);
        if (templateSeparatorRow != null) {
            for (int i = 0; i <= 11; i++) {
                int sourceRowNum = 25 + i;
                int targetRowNum = separatorStartRow + i;
                copyRowContent(mainSheet, sourceRowNum, targetRowNum, workbook);
            }
        }
        
        // Add page number
        Row pageNumberRow = mainSheet.getRow(separatorStartRow + 8);
        if (pageNumberRow != null) {
            Cell pageCell = pageNumberRow.getCell(10);
            if (pageCell == null) {
                pageCell = pageNumberRow.createCell(10);
            }
            int totalPages = (int) Math.ceil((double) totalRows / pageSize);
            pageCell.setCellValue((pageNumber + 1) + " of " + totalPages);
        }
        
        // Add formulas for subtotals
        int formulaRow = startRow + pageSize;
        int dataStartRow = startRow - pageSize + 1;
        int dataEndRow = startRow;
        
        // Columns G-R (6-17) for various counts and sums
        for (int col = 6; col <= 17; col++) {
            Row formulaRowObj = mainSheet.getRow(formulaRow);
            if (formulaRowObj == null) {
                formulaRowObj = mainSheet.createRow(formulaRow);
            }
            
            Cell formulaCell = formulaRowObj.createCell(col);
            String columnLetter = CellReference.convertNumToColString(col);
            
            String formula;
            if (col == 10 || col == 11) { // Columns K and L are sums
                formula = String.format("SUM(%s%d:%s%d)", 
                    columnLetter, dataStartRow + 1, 
                    columnLetter, dataEndRow + 1);
            } else { // Other columns are counts of "X"
                formula = String.format("COUNTIF(%s%d:%s%d,\"X\")", 
                    columnLetter, dataStartRow + 1, 
                    columnLetter, dataEndRow + 1);
            }
            
            formulaCell.setCellFormula(formula);
            
            // Also add to subtotal sheet
            addToSubtotalSheet(subTotalSheet, pageNumber, col, formula, workbook);
        }
        
        // Add page break
        mainSheet.setRowBreak(separatorStartRow);
        
    } catch (Exception e) {
        logger.debug("Error handling pagination: " + e.getMessage());
    }
}

private void copyRowContent(Sheet sheet, int sourceRowNum, int targetRowNum, Workbook workbook) {
    Row sourceRow = sheet.getRow(sourceRowNum);
    Row targetRow = sheet.getRow(targetRowNum);
    if (targetRow == null) {
        targetRow = sheet.createRow(targetRowNum);
    }
    
    if (sourceRow != null) {
        // Copy cell values and styles
        for (int i = 0; i <= 23; i++) {
            Cell sourceCell = sourceRow.getCell(i);
            Cell targetCell = targetRow.createCell(i);
            
            if (sourceCell != null) {
                // Copy cell value
                switch (sourceCell.getCellType()) {
                    case STRING:
                        targetCell.setCellValue(sourceCell.getStringCellValue());
                        break;
                    case NUMERIC:
                        targetCell.setCellValue(sourceCell.getNumericCellValue());
                        break;
                    case BOOLEAN:
                        targetCell.setCellValue(sourceCell.getBooleanCellValue());
                        break;
                    case FORMULA:
                        targetCell.setCellFormula(sourceCell.getCellFormula());
                        break;
                    default:
                        targetCell.setCellValue("");
                }
                
                // Copy cell style
                CellStyle newStyle = workbook.createCellStyle();
                newStyle.cloneStyleFrom(sourceCell.getCellStyle());
                targetCell.setCellStyle(newStyle);
            }
        }
        
        // Copy row height
        targetRow.setHeight(sourceRow.getHeight());
    }
}

private void copyRowFormat(Sheet sheet, int targetRowNum, Row sourceRow, Workbook workbook) {
    if (sourceRow == null) return;
    
    Row targetRow = sheet.getRow(targetRowNum);
    if (targetRow == null) {
        targetRow = sheet.createRow(targetRowNum);
    }
    
    // Copy cell styles from source to target
    for (int i = 0; i <= 23; i++) {
        Cell sourceCell = sourceRow.getCell(i);
        Cell targetCell = targetRow.getCell(i);
        if (targetCell == null) {
            targetCell = targetRow.createCell(i);
        }
        
        if (sourceCell != null) {
            CellStyle newStyle = workbook.createCellStyle();
            newStyle.cloneStyleFrom(sourceCell.getCellStyle());
            targetCell.setCellStyle(newStyle);
        }
    }
    
    // Copy row height
    targetRow.setHeight(sourceRow.getHeight());
}

private void addToSubtotalSheet(Sheet subTotalSheet, int pageNumber, int column, String formula, Workbook workbook) {
    int rowNum = pageNumber;
    Row row = subTotalSheet.getRow(rowNum);
    if (row == null) {
        row = subTotalSheet.createRow(rowNum);
    }
    
    Cell cell = row.createCell(column);
    cell.setCellFormula("'OSHA Form 300'!" + formula.replace("SUM(", "").replace("COUNTIF(", "").replace(")", ""));
}

private void handleRemainingRows(Workbook workbook, Sheet mainSheet, Sheet subTotalSheet, 
                               int startRow, int remainingRows, Map<Integer, Integer> rowHeights, 
                               int pageNumber, int totalRows) {
    try {
        if (remainingRows <= 0) return;
        
        int separatorStartRow = startRow + remainingRows;
        
        // Set row heights for separator rows
        for (int i = 0; i <= 11; i++) {
            int templateRowNum = 25 + i;
            int targetRowNum = separatorStartRow + i;
            Row targetRow = mainSheet.getRow(targetRowNum);
            if (targetRow == null) {
                targetRow = mainSheet.createRow(targetRowNum);
            }
            if (rowHeights.containsKey(templateRowNum)) {
                targetRow.setHeight(rowHeights.get(templateRowNum).shortValue());
            }
        }
        
        // Copy separator content
        Row templateSeparatorRow = mainSheet.getRow(25);
        if (templateSeparatorRow != null) {
            for (int i = 0; i <= 11; i++) {
                int sourceRowNum = 25 + i;
                int targetRowNum = separatorStartRow + i;
                copyRowContent(mainSheet, sourceRowNum, targetRowNum, workbook);
            }
        }
        
        // Add page number
        Row pageNumberRow = mainSheet.getRow(separatorStartRow + 8);
        if (pageNumberRow != null) {
            Cell pageCell = pageNumberRow.getCell(10);
            if (pageCell == null) {
                pageCell = pageNumberRow.createCell(10);
            }
            int totalPages = (int) Math.ceil((double) totalRows / 10);
            pageCell.setCellValue((pageNumber + 1) + " of " + totalPages);
        }
        
        // Add formulas for the remaining rows
        int formulaRow = startRow + remainingRows;
        int dataStartRow = startRow - remainingRows + 1;
        int dataEndRow = startRow;
        
        for (int col = 6; col <= 17; col++) {
            Row formulaRowObj = mainSheet.getRow(formulaRow);
            if (formulaRowObj == null) {
                formulaRowObj = mainSheet.createRow(formulaRow);
            }
            
            Cell formulaCell = formulaRowObj.createCell(col);
            String columnLetter = CellReference.convertNumToColString(col);
            
            String formula;
            if (col == 10 || col == 11) {
                formula = String.format("SUM(%s%d:%s%d)", 
                    columnLetter, dataStartRow + 1, 
                    columnLetter, dataEndRow + 1);
            } else {
                formula = String.format("COUNTIF(%s%d:%s%d,\"X\")", 
                    columnLetter, dataStartRow + 1, 
                    columnLetter, dataEndRow + 1);
            }
            
            formulaCell.setCellFormula(formula);
            addToSubtotalSheet(subTotalSheet, pageNumber, col, formula, workbook);
        }
        
        // Add page break
        mainSheet.setRowBreak(separatorStartRow);
        
    } catch (Exception e) {
        logger.debug("Error handling remaining rows: " + e.getMessage());
    }
}

private void cleanupWorkbook(Workbook workbook, Sheet mainSheet, boolean isMorePage, 
                           int blankLineCount, int pageSize, int pageNumber) {
    try {
        // Remove any temporary rows or sheets that were used during processing
        if (isMorePage && blankLineCount > 0) {
            // Remove blank rows at the beginning if needed
            for (int i = 0; i < blankLineCount; i++) {
                Row row = mainSheet.getRow(i);
                if (row != null) {
                    mainSheet.removeRow(row);
                }
            }
        }
        
        // Ensure all formulas are recalculated
        for (int i = 0; i < workbook.getNumberOfSheets(); i++) {
            Sheet sheet = workbook.getSheetAt(i);
            if (sheet != null) {
                for (Row row : sheet) {
                    for (Cell cell : row) {
                        if (cell.getCellType() == CellType.FORMULA) {
                            // Trigger formula recalculation
                            FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();
                            evaluator.evaluateFormulaCell(cell);
                        }
                    }
                }
            }
        }
        
        // Auto-size columns for better readability
        for (int i = 0; i <= 23; i++) {
            mainSheet.autoSizeColumn(i);
            // Set minimum column width
            if (mainSheet.getColumnWidth(i) < 2000) {
                mainSheet.setColumnWidth(i, 2000);
            }
        }
        
    } catch (Exception e) {
        logger.debug("Error during workbook cleanup: " + e.getMessage());
    }
}

private void setPrintArea(Sheet sheet, int pageSize, int pageNumber) {
    try {
        // Calculate print area based on page structure
        int printStartRow = 24; // Base row
        int printEndRow = printStartRow + (pageNumber * (pageSize + 12)) - 1;
        
        // Ensure we don't exceed sheet boundaries
        int lastRowNum = sheet.getLastRowNum();
        if (printEndRow > lastRowNum) {
            printEndRow = lastRowNum;
        }
        
        // Set print area (columns A-R, which are 0-17)
        String printArea = String.format("$A$%d:$R$%d", printStartRow + 1, printEndRow + 1);
        
        // For XSSF sheets
        if (sheet instanceof XSSFSheet) {
            XSSFSheet xssfSheet = (XSSFSheet) sheet;
            xssfSheet.setPrintArea(0, 17, printStartRow, printEndRow);
        }
        
        // Set print setup
        PrintSetup printSetup = sheet.getPrintSetup();
        printSetup.setLandscape(false);
        printSetup.setPaperSize(PrintSetup.A4_PAPERSIZE);
        printSetup.setFitWidth((short) 1);
        printSetup.setFitHeight((short) 0);
        
        // Set margins
        sheet.setMargin(Sheet.LeftMargin, 0.5);
        sheet.setMargin(Sheet.RightMargin, 0.5);
        sheet.setMargin(Sheet.TopMargin, 0.5);
        sheet.setMargin(Sheet.BottomMargin, 0.5);
        sheet.setMargin(Sheet.HeaderMargin, 0.3);
        sheet.setMargin(Sheet.FooterMargin, 0.3);
        
        // Set repeating rows for headers
        sheet.setRepeatingRows(CellRangeAddress.valueOf("$1:$24"));
        
    } catch (Exception e) {
        logger.debug("Error setting print area: " + e.getMessage());
    }
}

// Additional helper method for cell value copying
private void copyCellValue(Cell sourceCell, Cell targetCell) {
    if (sourceCell == null || targetCell == null) return;
    
    switch (sourceCell.getCellType()) {
        case STRING:
            targetCell.setCellValue(sourceCell.getStringCellValue());
            break;
        case NUMERIC:
            targetCell.setCellValue(sourceCell.getNumericCellValue());
            break;
        case BOOLEAN:
            targetCell.setCellValue(sourceCell.getBooleanCellValue());
            break;
        case FORMULA:
            targetCell.setCellFormula(sourceCell.getCellFormula());
            break;
        case BLANK:
            targetCell.setBlank();
            break;
        default:
            targetCell.setCellValue("");
    }
}
```

These methods now include:

1. handlePagination: Manages page breaks, formulas, and separator rows for each page
2. copyRowFormat: Copies cell styles and formatting between rows
3. handleRemainingRows: Handles the final partial page of data
4. cleanupWorkbook: Performs final cleanup, auto-sizing, and formula recalculation
5. setPrintArea: Configures printing settings and page layout

Key features implemented:

· Proper formula generation for counts and sums
· Page numbering and formatting
· Print area configuration
· Memory management and cleanup
· Error handling with logging
· Maintenance of original business logic while using Apache POI

The implementation maintains the original OSHA 300 form structure and functionality while using modern Apache POI libraries.