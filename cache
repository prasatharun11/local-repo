import com.github.benmanes.caffeine.cache.Caffeine;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.support.SimpleCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;
import java.util.concurrent.TimeUnit;

@Configuration
public class CacheConfig {

    @Bean
    public CacheManager cacheManager() {
        // Estimate JVM heap
        long maxHeap = Runtime.getRuntime().maxMemory();
        long usedHeap = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();

        // Log memory info
        System.out.printf("Max Heap: %.2f MB%n", maxHeap / (1024.0 * 1024));
        System.out.printf("Used Heap: %.2f MB%n", usedHeap / (1024.0 * 1024));

        // Estimate per-entry size (e.g., 10 KB per item)
        long estimatedEntrySize = 10 * 1024;

        // Allow cache to use up to 10% of heap
        long targetHeapUsage = (long) (maxHeap * 0.10);
        long maxEntries = targetHeapUsage / estimatedEntrySize;

        System.out.println("Estimated max cache entries: " + maxEntries);

        // Build Caffeine cache
        CaffeineCache userCodeCache = new CaffeineCache("userCodeCache",
                Caffeine.newBuilder()
                        .expireAfterWrite(30, TimeUnit.MINUTES)
                        .maximumSize(maxEntries)
                        .build());

        SimpleCacheManager cacheManager = new SimpleCacheManager();
        cacheManager.setCaches(List.of(userCodeCache));
        return cacheManager;
    }
}