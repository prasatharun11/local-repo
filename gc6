Sure! Here's a complete, step-by-step implementation guide to integrate Google Closure Compiler into your Gradle + JSP Java web application — so it automatically minifies .js files into .min.js versions during the build.


---

Step 1: Add Closure Compiler to build.gradle

In your build.gradle, add:

plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.javascript:closure-compiler:v20240325' // Use latest
}


---

Step 2: Create the Java Minifier Class

In src/main/java/com/yourcompany/build/JsMinifier.java:

package com.yourcompany.build;

import com.google.javascript.jscomp.*;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.Collections;

public class JsMinifier {

    public static void minify(File inputFile, File outputFile) throws Exception {
        Compiler compiler = new Compiler();

        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromFile(inputFile, StandardCharsets.UTF_8);

        Result result = compiler.compile(Collections.singletonList(extern), Collections.singletonList(input), options);

        if (result.success) {
            Files.write(outputFile.toPath(), compiler.toSource().getBytes(StandardCharsets.UTF_8));
            System.out.println("Minified: " + outputFile.getName());
        } else {
            System.err.println("Minification failed for " + inputFile.getName());
            result.errors.forEach(e -> System.err.println(e.toString()));
            throw new RuntimeException("JS Minification failed");
        }
    }
}


---

Step 3: Create a Gradle Task to Minify JS

Add this to build.gradle:

import com.yourcompany.build.JsMinifier

task minifyJs {
    description = 'Minifies all .js files in web/ir_tpa (skipping .min.js)'
    doLast {
        def jsDir = file('src/main/webapp/web/ir_tpa')
        jsDir.listFiles(new FilenameFilter() {
            boolean accept(File dir, String name) {
                return name.endsWith(".js") && !name.endsWith(".min.js")
            }
        })?.each { File jsFile ->
            def minFile = new File(jsFile.parentFile, jsFile.name.replace(".js", ".min.js"))
            println "Minifying ${jsFile.name} -> ${minFile.name}"
            JsMinifier.minify(jsFile, minFile)
        }
    }
}

build.dependsOn minifyJs

> This will:

Skip .min.js files

Minify each .js to .min.js in the same directory





---

Step 4: Build the Project

From terminal:

./gradlew build

You should see .min.js files generated in:

src/main/webapp/web/ir_tpa/


---

Step 5: Dynamic Serving with MinifyJsFilter (Production)

Use the MinifyJsFilter we discussed earlier to dynamically serve .min.js files in production, so your JSP stays like:

<script src="/web/ir_tpa/app.js?v=20250428"></script>

Filter internally rewrites to .min.js if available and production is enabled.


---

✅ Final Result

Your original app.js remains untouched

app.min.js is auto-created during gradle build

JSP uses only app.js

Filter serves .min.js in production, with gzip and cache

No need for Node, NPM, or Terser



---

Would you like a working GitHub-style zipped example project too?

