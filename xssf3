package com.example.ir.utils;

import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.regex.Pattern;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.config.Configurator;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.ss.util.RegionUtil;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;

import com.example.ir.controller.SomeController;

public class Convert {
    private static final DecimalFormat DECIMAL_FORMAT = (DecimalFormat) DecimalFormat.getInstance(Locale.US);
    private static final DecimalFormat NO_DECIMAL_FORMAT = new DecimalFormat("0");
    private static final Pattern CURRENCY_PATTERN = Pattern.compile("^-?(?:\\d{1,3}(?:,\\d{3})*|\\d+)\\.\\d{2}$");
    private static final Pattern NUMERIC_PATTERN = Pattern.compile("^-?(?:\\d{1,3}(?:,\\d{3})*|\\d+)$");
    private static final Pattern COMMA_NUMERIC_PATTERN = Pattern.compile("[+-]?\\d{1,3}(?:,\\d{3})*");
    private static final Pattern PLAIN_NUMERIC_PATTERN = Pattern.compile("^-?\\d+$");
    private static final Pattern DATE_PATTERN = Pattern.compile("^(\\d{2,4})-(\\d{1,2})-(\\d{1,2})$");
    private static final Pattern DATE_PATTERN_2 = Pattern.compile("^(\\d{1,2})/(\\d{1,2})/(\\d{2,4})$");
    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    private static final DateTimeFormatter DATE_SOURCE_FORMAT = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    private static final float BASE_ROW_HEIGHT = 15f;
    private static final float FONT_HEIGHT_MULTIPLIER = 1.2f;
    private static final Map<String, Font> fontCache = new HashMap<>();
    private static final Map<String, CellStyle> styleCache = new HashMap<>();
    private static final Map<String, Short> dataFormatCache = new HashMap<>();
    private static String rowFontColor = "";
    List<CellRangeAddress> globalMergedRegions = new ArrayList<>();

    private static Logger logger = LogManager.getLogger(SomeController.class);

    public XSSFWorkbook convert(String html, String fileName) throws IOException {
        Configurator.setLevel("org.apache.poi", Level.ERROR);
        Document doc = Jsoup.parse(html);
        try (XSSFWorkbook workbook = new XSSFWorkbook()) {

            Sheet sheet = workbook.createSheet(fileName);
            sheet.setDisplayGridlines(false);

            int currentRow = 0;
            for (Node node : doc.body().childNodes()) {
                if (node instanceof Element) {
                    Element element = (Element) node;
                    if (element.tagName().equals("table")) {
                        currentRow = processTable(element, sheet, workbook, currentRow);
                    } else if (isSpacingElement(element)) {
                        currentRow += getSpacing(element);
                    }
                }
            }
            fontCache.clear();
            styleCache.clear();
            dataFormatCache.clear();
            return workbook;
        }
    }

    private int processTable(Element table, Sheet sheet, Workbook workbook, int startRow) {
        boolean tableHasBorder = table.hasAttr("border") && !table.attr("border").equals("0");
        int tableWidth = getTableWidth(table);
        List<CellRangeAddress> mergedRegions = new ArrayList<>();

        for (Element tr : table.select("tr")) {
            String bgColor = tr.hasAttr("color") ? tr.attr("color") : extractStyle(tr, "color");
            rowFontColor = bgColor;
            float maxFontHeight = 0;
            Row excelRow = sheet.createRow(startRow);
            int colNum = 0;
            for (Element cell : tr.select("td, th")) {
                while (excelRow.getCell(colNum) != null)
                    colNum++;

                Cell excelCell = excelRow.createCell(colNum);
                Map<String, Boolean> cellTypeMap = setCellValue(cell, excelCell);

                CellStyle style = applyCellStyles(cell, excelCell, workbook, tableHasBorder, cellTypeMap);

                Font font = workbook.getFontAt(style.getFontIndex());
                maxFontHeight = Math.max(maxFontHeight, font.getFontHeightInPoints());

                int colspan = getSpanValue(cell, "colspan");
                int rowspan = getSpanValue(cell, "rowspan");

                if (colspan > 1 || rowspan > 1) {
                    mergedRegions
                            .add(new CellRangeAddress(startRow, startRow + rowspan - 1, colNum, colNum + colspan - 1));
                }
                colNum += colspan;
            }
            if (maxFontHeight > 0) {
                float rowHeight = Math.max(BASE_ROW_HEIGHT, maxFontHeight * FONT_HEIGHT_MULTIPLIER);
                excelRow.setHeightInPoints(rowHeight);
            }
            fillEmptyCells(excelRow, tableWidth);
            startRow++;
            rowFontColor = "";
        }
        globalMergedRegions.addAll(mergedRegions);

        for (CellRangeAddress region : mergedRegions) {
            sheet.addMergedRegion(region);
            applyBorderToMergedRegion(sheet, region);
        }

        for (int i = 0; i < tableWidth; i++) {
            safeAutoSizeColumn(sheet, i, globalMergedRegions);
        }
        return startRow;
    }

    // ... [Keep all other methods unchanged until getHSSFColor]

    private XSSFColor getXSSFColor(String htmlColor) {
        if (htmlColor.startsWith("#")) {
            String hex = htmlColor.substring(1);
            if (hex.length() == 3) {
                hex = String.format("%s%s%s%s%s%s", hex.charAt(0), hex.charAt(0), hex.charAt(1), hex.charAt(1),
                        hex.charAt(2), hex.charAt(2));
            }

            int red = Integer.parseInt(hex.substring(0, 2), 16);
            int green = Integer.parseInt(hex.substring(2, 4), 16);
            int blue = Integer.parseInt(hex.substring(4, 6), 16);
            
            return new XSSFColor(new byte[]{(byte)red, (byte)green, (byte)blue}, null);
        }

        htmlColor = htmlColor.replaceAll("[^a-zA-Z0-9]", "");

        switch (htmlColor.toLowerCase()) {
            case "red":
                return new XSSFColor(new byte[]{(byte)255, 0, 0}, null);
            case "green":
                return new XSSFColor(new byte[]{0, (byte)255, 0}, null);
            case "blue":
                return new XSSFColor(new byte[]{0, 0, (byte)255}, null);
            case "yellow":
                return new XSSFColor(new byte[]{(byte)255, (byte)255, 0}, null);
            case "cyan":
                return new XSSFColor(new byte[]{0, (byte)255, (byte)255}, null);
            case "magenta":
                return new XSSFColor(new byte[]{(byte)255, 0, (byte)255}, null);
            case "white":
                return new XSSFColor(new byte[]{(byte)255, (byte)255, (byte)255}, null);
            case "black":
                return new XSSFColor(new byte[]{0, 0, 0}, null);
            case "gray":
            case "grey":
                return new XSSFColor(new byte[]{(byte)128, (byte)128, (byte)128}, null);
            default:
                return null; // Automatic color
        }
    }

    // Update applyCellStyles to use XSSFColor
    private CellStyle applyCellStyles(Element cell, Cell excelCell, Workbook workbook, boolean applyBorders,
            Map<String, Boolean> cellTypeMap) {
        CellStyle style = null;
        try {
            boolean isCurrency = cellTypeMap.get("isCurrency");
            boolean isPlainNumber = cellTypeMap.get("isPlainNumber");
            String fontName = "Aptos Narrow";
            boolean isBold = cell.tagName().equals("th") || hasStyle(cell, "font-weight", "bold");
            boolean isItalic = hasStyle(cell, "font-style", "italic");
            short fontHeight = 11;
            XSSFColor fontColor = null;

            XSSFColor fillForegroundColor = null;
            FillPatternType fillPattern = null;
            String dataFormat = "";
            HorizontalAlignment alignment = null;
            BorderStyle border = null;
            String styleFont = null;
            boolean wrapText = true;

            String fontSize = extractStyle(cell, "font-size");
            if (!fontSize.isEmpty()) {
                try {
                    fontSize = fontSize.replace("px", "").trim();
                    float size = Float.parseFloat(fontSize);
                    fontHeight = (short) size;
                } catch (NumberFormatException e) {
                    logger.fatal(e.getMessage());
                }
            } else {
                fontHeight = 11;
            }

            String color = extractStyle(cell, "color");
            if (!color.isEmpty()) {
                fontColor = getXSSFColor(color);
            }
            if (!rowFontColor.equals("")) {
                fontColor = getXSSFColor(rowFontColor);
            }

            String bgColor = cell.hasAttr("bgcolor") ? cell.attr("bgcolor") : extractStyle(cell, "background-color");
            if (!bgColor.isEmpty()) {
                fillForegroundColor = getXSSFColor(bgColor);
                fillPattern = FillPatternType.SOLID_FOREGROUND;
            }

            if (excelCell.getCellType() == CellType.NUMERIC && !isCurrency && !isPlainNumber) {
                dataFormat = getorCreateDataFormat(workbook, "#,##0");
            } else if (excelCell.getCellType() == CellType.NUMERIC && isPlainNumber) {
                dataFormat = getorCreateDataFormat(workbook, "0");
            } else if (excelCell.getCellType() == CellType.NUMERIC && isCurrency) {
                dataFormat = getorCreateDataFormat(workbook, "#,##0.00");
            }
            if (isDateFormat(cell.text().trim()) || isDate(cell.text().trim())) {
                alignment = HorizontalAlignment.RIGHT;
                dataFormat = getorCreateDataFormat(workbook, "m/d/yy");
            }
            String align = extractStyle(cell, "text-align");
            if (align.isEmpty())
                align = cell.attr("align");
            if (align.equalsIgnoreCase("left"))
                alignment = HorizontalAlignment.LEFT;
            else if (align.equalsIgnoreCase("right"))
                alignment = HorizontalAlignment.RIGHT;
            else if (align.equalsIgnoreCase("center"))
                alignment = HorizontalAlignment.CENTER;
            else if (align.equalsIgnoreCase("justify"))
                alignment = HorizontalAlignment.JUSTIFY;

            if (applyBorders) {
                border = BorderStyle.THIN;
            } else {
                border = BorderStyle.NONE;
            }
            String font = getOrCreateFont(workbook, fontName, fontHeight, isBold, isItalic, fontColor);
            styleFont = font;
            style = getOrCreateStyle(workbook, fillForegroundColor, fillPattern, dataFormat, alignment, border,
                    styleFont, wrapText);
            excelCell.setCellStyle(style);
        } catch (Exception e) {
            logger.fatal(e.getMessage());
        }
        return style;
    }

    // Update getOrCreateStyle to handle XSSFColor
    private CellStyle getOrCreateStyle(Workbook workbook, XSSFColor fillForegroundColor, FillPatternType fillPattern,
            String dataFormat, HorizontalAlignment alignment, BorderStyle border, String styleFont, boolean wrapText) {
        String key = (fillForegroundColor != null ? fillForegroundColor.getARGBHex() : "null") + "-" + fillPattern + "-" + dataFormat + "-" + alignment + "-" + border + "-"
                + styleFont + "-" + wrapText;
        if (styleCache.containsKey(key)) {
            return styleCache.get(key);
        }
        CellStyle style = workbook.createCellStyle();
        if (fillForegroundColor != null)
            ((XSSFCellStyle)style).setFillForegroundColor(fillForegroundColor);
        if (Objects.nonNull(fillPattern))
            style.setFillPattern(fillPattern);

        if (!dataFormat.isEmpty())
            style.setDataFormat(dataFormatCache.get(dataFormat));
        if (Objects.nonNull(alignment))
            style.setAlignment(alignment);
        if (Objects.nonNull(border)) {
            style.setBorderTop(border);
            style.setBorderBottom(border);
            style.setBorderLeft(border);
            style.setBorderRight(border);
        }
        if (!styleFont.isEmpty())
            style.setFont(fontCache.get(styleFont));
        if (!styleFont.isEmpty())
            style.setWrapText(wrapText);
        styleCache.put(key, style);
        return style;
    }

    // Update getOrCreateFont to handle XSSFColor
    private String getOrCreateFont(Workbook workbook, String fontName, short fontSize, boolean isBold, boolean isItalic,
            XSSFColor color) {
        String key = fontName + "-" + fontSize + "-" + isBold + "-" + isItalic + "-" + (color != null ? color.getARGBHex() : "null");
        if (fontCache.containsKey(key)) {
            return key;
        }
        Font font = workbook.createFont();
        font.setFontName(fontName);
        font.setFontHeightInPoints(fontSize);
        font.setBold(isBold);
        font.setItalic(isItalic);
        if (color != null) {
            ((XSSFFont)font).setColor(color);
        }
        fontCache.put(key, font);
        return key;
    }

    // ... [Keep all remaining methods unchanged]
}