import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.regex.*;

public class DuplicateAttributeChecker {

    // Regex pattern to match HTML opening tags (e.g., <button ...>).
    private static final Pattern OPENING_TAG_PATTERN = Pattern.compile("<(\\w+)([^>]*)>");
    // Regex pattern to match HTML attributes (e.g., id="value").
    private static final Pattern ATTRIBUTE_PATTERN = Pattern.compile("(\\w+)\\s*=\\s*\"[^\"]*\"");
    // Regex pattern to match JSP Java code blocks (e.g., <% ... %>, <%= ... %>, <%! ... %>).
    private static final Pattern JSP_CODE_BLOCK_PATTERN = Pattern.compile("<%[^>]*%>");
    // Regex pattern to match HTML closing tags (e.g., </button>).
    private static final Pattern CLOSING_TAG_PATTERN = Pattern.compile("</(\\w+)>");

    public static void main(String[] args) {
        String directoryPath = "/path/to/your/jsp/files"; // Provide your directory path here

        try {
            // Walk through all files in the provided directory and filter .jsp files.
            Files.walk(Paths.get(directoryPath))
                 .filter(Files::isRegularFile)
                 .filter(path -> path.toString().endsWith(".jsp"))
                 .forEach(DuplicateAttributeChecker::processFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void processFile(Path filePath) {
        try (BufferedReader reader = Files.newBufferedReader(filePath)) {
            String line;
            int lineNumber = 0;

            // To store the current open tag and its starting line number
            StringBuilder currentTag = new StringBuilder();
            String currentTagName = "";
            int openTagCount = 0; // Track the number of open tags
            int startLineNumber = -1; // Line number where the tag starts

            Map<String, Integer> attributeLineMap = new HashMap<>(); // Track line numbers for each attribute

            while ((line = reader.readLine()) != null) {
                lineNumber++;
                // Remove JSP Java code blocks before processing for HTML tags.
                String sanitizedLine = removeJspCodeBlocks(line);
                Matcher openingTagMatcher = OPENING_TAG_PATTERN.matcher(sanitizedLine);

                // Check for opening tags
                while (openingTagMatcher.find()) {
                    currentTagName = openingTagMatcher.group(1);
                    currentTag.setLength(0); // Clear the StringBuilder for the new tag
                    currentTag.append(openingTagMatcher.group(0)); // Start with the found opening tag
                    openTagCount++;
                    startLineNumber = lineNumber; // Set the starting line number
                    attributeLineMap.clear(); // Reset for new tag
                }

                // Check for closing tags
                Matcher closingTagMatcher = CLOSING_TAG_PATTERN.matcher(sanitizedLine);
                while (closingTagMatcher.find()) {
                    String foundClosingTagName = closingTagMatcher.group(1);
                    if (openTagCount > 0 && foundClosingTagName.equals(currentTagName)) {
                        openTagCount--;
                        // Check for duplicate attributes in the current tag
                        checkForDuplicateAttributes(currentTag.toString(), filePath.toString(), startLineNumber, attributeLineMap);
                        currentTag.setLength(0); // Clear for the next tag
                        currentTagName = ""; // Reset the current tag name
                    }
                }

                // If the current line contains part of an open tag, append it
                if (openTagCount > 0) {
                    currentTag.append(" ").append(sanitizedLine.trim());
                    checkAttributesInLine(sanitizedLine, attributeLineMap, lineNumber); // Check attributes in the line
                }
            }

            // Final check for any unclosed tags in case the file ends without closing
            if (openTagCount > 0) {
                checkForDuplicateAttributes(currentTag.toString(), filePath.toString(), startLineNumber, attributeLineMap);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Remove JSP scriptlets, expressions, and declarations from the line to avoid interference.
    private static String removeJspCodeBlocks(String line) {
        Matcher jspMatcher = JSP_CODE_BLOCK_PATTERN.matcher(line);
        return jspMatcher.replaceAll("");  // Replace JSP code blocks with an empty string.
    }

    // Check for duplicate attributes within the HTML tag.
    private static void checkForDuplicateAttributes(String tag, String fileName, int startLineNumber, Map<String, Integer> attributeLineMap) {
        Matcher attributeMatcher = ATTRIBUTE_PATTERN.matcher(tag);
        Map<String, Integer> attributes = new HashMap<>();

        while (attributeMatcher.find()) {
            String attributeName = attributeMatcher.group(1);
            if (attributes.containsKey(attributeName)) {
                // Print a message if a duplicate attribute is found, using the stored line number.
                int duplicateLine = attributeLineMap.get(attributeName);
                System.out.printf("Duplicate attribute '%s' found in file %s at line %d%n", 
                                  attributeName, fileName, duplicateLine);
            } else {
                attributes.put(attributeName, attributeMatcher.start());
            }
        }
    }

    // Check attributes in a single line and store the line number for each.
    private static void checkAttributesInLine(String line, Map<String, Integer> attributeLineMap, int lineNumber) {
        Matcher attributeMatcher = ATTRIBUTE_PATTERN.matcher(line);
        while (attributeMatcher.find()) {
            String attributeName = attributeMatcher.group(1);
            if (!attributeLineMap.containsKey(attributeName)) {
                attributeLineMap.put(attributeName, lineNumber); // Store the line number for each attribute
            }
        }
    }
}