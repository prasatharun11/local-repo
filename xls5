import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/generateXls")
public class HtmlToXlsServlet extends HttpServlet {

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String htmlContent = request.getParameter("htmlContent");  // Receiving HTML table as input

        if (htmlContent == null || htmlContent.trim().isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "No HTML content provided");
            return;
        }

        // Parse HTML content using Jsoup
        Document doc = Jsoup.parse(htmlContent);
        Element table = doc.select("table").first();

        if (table == null) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "No table found in HTML");
            return;
        }

        // Create an XLS workbook
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("Sheet1");

        Elements rows = table.select("tr");
        int rowNum = 0;

        for (Element row : rows) {
            HSSFRow excelRow = sheet.createRow(rowNum++);
            Elements cells = row.select("td, th");
            int colNum = 0;

            for (Element cell : cells) {
                HSSFCell excelCell = excelRow.createCell(colNum);
                excelCell.setCellValue(cell.text());

                // Preserve Styles
                HSSFCellStyle cellStyle = workbook.createCellStyle();
                HSSFFont font = workbook.createFont();

                // Handle font color from inline styles
                String style = cell.attr("style");
                if (style.contains("color:")) {
                    String color = style.split("color:")[1].split(";")[0].trim();
                    font.setColor(getExcelColor(color));
                }

                cellStyle.setFont(font);
                excelCell.setCellStyle(cellStyle);

                colNum++;
            }
        }

        // Auto-size columns based on content
        for (int i = 0; i < rows.get(0).select("td, th").size(); i++) {
            sheet.autoSizeColumn(i);
        }

        // Set response headers for XLS download
        response.setContentType("application/vnd.ms-excel");
        response.setHeader("Content-Disposition", "attachment; filename=output.xls");

        // Write workbook to output stream
        ServletOutputStream out = response.getOutputStream();
        workbook.write(out);
        out.flush();
        out.close();
        workbook.close();
    }

    /**
     * Converts CSS color (e.g., #FF0000) to Apache POI HSSF color index.
     */
    private short getExcelColor(String cssColor) {
        if (cssColor.startsWith("#")) {
            if (cssColor.equalsIgnoreCase("#FF0000")) return HSSFColor.HSSFColorPredefined.RED.getIndex();
            if (cssColor.equalsIgnoreCase("#00FF00")) return HSSFColor.HSSFColorPredefined.GREEN.getIndex();
            if (cssColor.equalsIgnoreCase("#0000FF")) return HSSFColor.HSSFColorPredefined.BLUE.getIndex();
        }
        return HSSFColor.HSSFColorPredefined.BLACK.getIndex(); // Default color
    }
}