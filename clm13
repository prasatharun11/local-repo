private static List<String> partitionChunks(List<String> entries, int chunkLimit, boolean byLength, int numChunks) {
    List<String> chunks = new ArrayList<>(Collections.nCopies(numChunks, ""));
    int chunkIndex = 0;
    StringBuilder current = new StringBuilder();

    if (byLength) {
        for (String entry : entries) {
            String text = entry;
            while (!text.isEmpty() && chunkIndex < numChunks) {
                int space = chunkLimit - current.length();
                if (space <= 0) { 
                    chunks.set(chunkIndex++, current.toString());
                    current.setLength(0);
                    continue;
                }
                int split = text.length() <= space ? text.length() : findSafeSplitIndex(text, space);
                if (split == 0) { // can't split safely
                    if (current.length() > 0) {
                        chunks.set(chunkIndex++, current.toString());
                        current.setLength(0);
                        continue;
                    }
                    split = text.length(); 
                }
                current.append(text, 0, split);
                text = text.substring(split);
            }
            if (chunkIndex >= numChunks) break;
        }
        if (chunkIndex < numChunks && current.length() > 0)
            chunks.set(chunkIndex++, current.toString());

    } else { // ---- Count-based ----
        AtomicInteger counter = new AtomicInteger();
        entries.stream()
               .collect(Collectors.groupingBy(i -> counter.getAndIncrement() / chunkLimit))
               .forEach((idx, group) -> {
                   if (idx < numChunks) {
                       String joined = String.join("", group);
                       chunks.set(idx, joined.endsWith("~") ? joined : joined + "~");
                   }
               });
    }

    // Fill empty chunks with "~"
    for (int i = 0; i < numChunks; i++)
        if (chunks.get(i).isEmpty()) chunks.set(i, "~");

    // Post-process: fix chunks starting with ~ or |
    for (int i = 1; i < numChunks; i++) {
        String cur = chunks.get(i), prev = chunks.get(i - 1);
        if (cur.startsWith("~") && prev.length() >= 3) {
            String lastCountry = prev.substring(prev.length() - 3);
            chunks.set(i - 1, prev.substring(0, prev.length() - 3));
            chunks.set(i, lastCountry + cur.substring(1));
        } else if (cur.startsWith("|") && !prev.isEmpty()) {
            int lastPipe = prev.lastIndexOf('|');
            if (lastPipe != -1) {
                chunks.set(i - 1, prev.substring(0, lastPipe));
                chunks.set(i, prev.substring(lastPipe) + cur.substring(1));
            }
        }
    }

    return chunks;
}

private static int findSafeSplitIndex(String text, int maxLength) {
    if (maxLength >= text.length()) return text.length();

    if (maxLength >= 2 && text.startsWith("P-")) {
        int programEnd = text.indexOf('|');
        if (programEnd != -1) 
            return programEnd < maxLength ? programEnd + 1 : 0;
    }

    for (int i = Math.min(maxLength, text.length()); i > 0; i--) {
        char c = text.charAt(i - 1);
        if (c == '~' || c == '|') return i;
        if (i % 3 == 0 && i < text.length() && (text.charAt(i) == '~' || text.charAt(i) == '|'))
            return i;
    }
    return 0;
}