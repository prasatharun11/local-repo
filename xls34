import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Locale;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class CompleteHtmlToExcelConverter {

    private static final DecimalFormat DECIMAL_FORMAT = (DecimalFormat) DecimalFormat.getInstance(Locale.US);
    private static final Pattern NUMERIC_PATTERN = Pattern.compile("^[+-]?\\d{1,3}(,\\d{3})*(\\.\\d+)?$");

    public static void convert(String html, String outputPath) throws IOException {
        Document doc = Jsoup.parse(html);
        try (HSSFWorkbook workbook = new HSSFWorkbook();
             FileOutputStream out = new FileOutputStream(outputPath)) {
            Sheet sheet = workbook.createSheet("Data");
            int currentRow = 0;
            for (Node node : doc.body().childNodes()) {
                if (node instanceof Element) {
                    Element element = (Element) node;
                    if (element.tagName().equals("table")) {
                        currentRow = processTable(element, sheet, workbook, currentRow);
                    } else if (isSpacingElement(element)) {
                        currentRow += getSpacing(element);
                    }
                }
            }
            workbook.write(out);
        }
    }

    private static int processTable(Element table, Sheet sheet, Workbook workbook, int startRow) {
        boolean tableHasBorder = table.hasAttr("border") && !table.attr("border").equals("0");
        int tableWidth = getTableWidth(table);
        List<CellRangeAddress> mergedRegions = new ArrayList<>();
        int firstRow = startRow;

        for (Element tr : table.select("tr")) {
            Row excelRow = sheet.createRow(startRow++);
            
            // Apply row-level styles first
            applyRowStyles(tr, excelRow, workbook);
            
            int colNum = 0;
            for (Element cell : tr.select("td, th")) {
                while (excelRow.getCell(colNum) != null) colNum++;
                Cell excelCell = excelRow.createCell(colNum);
                setCellValue(cell, excelCell);
                
                // Apply cell styles (will override row styles where specified)
                applyCellStyles(cell, excelCell, workbook, false);
                
                int colspan = getSpanValue(cell, "colspan");
                int rowspan = getSpanValue(cell, "rowspan");
                if (colspan > 1 || rowspan > 1) {
                    mergedRegions.add(new CellRangeAddress(
                        startRow - 1, startRow - 1 + rowspan - 1,
                        colNum, colNum + colspan - 1
                    ));
                }
                colNum += colspan;
            }
            fillEmptyCells(excelRow, tableWidth);
        }

        if (tableHasBorder) {
            applyTableBorders(sheet, firstRow, startRow - firstRow, tableWidth, mergedRegions);
        }

        for (CellRangeAddress region : mergedRegions) {
            sheet.addMergedRegion(region);
        }

        autoSizeColumns(sheet, tableWidth);
        return startRow;
    }

    private static void applyRowStyles(Element tr, Row excelRow, Workbook workbook) {
        // Create base style for the entire row
        CellStyle rowStyle = workbook.createCellStyle();
        boolean styleApplied = false;
        
        // Row background color
        String bgColor = tr.hasAttr("bgcolor") ? tr.attr("bgcolor") : extractStyle(tr, "background-color");
        if (!bgColor.isEmpty()) {
            rowStyle.setFillForegroundColor(getHSSFColor(bgColor));
            rowStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            styleApplied = true;
        }
        
        // Row height
        String height = extractStyle(tr, "height");
        if (!height.isEmpty()) {
            try {
                excelRow.setHeightInPoints(Integer.parseInt(height.replace("px", "")));
            } catch (NumberFormatException ignored) {}
        }
        
        // Apply to all cells in row if any styles were set
        if (styleApplied) {
            for (int i = 0; i < excelRow.getLastCellNum(); i++) {
                Cell cell = excelRow.getCell(i);
                if (cell == null) cell = excelRow.createCell(i);
                
                // Merge with existing cell style if it exists
                CellStyle newStyle = workbook.createCellStyle();
                newStyle.cloneStyleFrom(cell.getCellStyle());
                newStyle.setFillForegroundColor(rowStyle.getFillForegroundColor());
                newStyle.setFillPattern(rowStyle.getFillPattern());
                cell.setCellStyle(newStyle);
            }
        }
    }

    private static void applyCellStyles(Element cell, Cell excelCell, Workbook workbook, boolean applyBorders) {
        CellStyle style = workbook.createCellStyle();
        style.cloneStyleFrom(excelCell.getCellStyle()); // Start with row styles
        
        Font font = workbook.createFont();
        boolean fontChanged = false;

        // Font weight (bold)
        if (cell.tagName().equals("th") || hasStyle(cell, "font-weight", "bold")) {
            font.setBold(true);
            fontChanged = true;
        }

        // Font style (italic)
        if (hasStyle(cell, "font-style", "italic")) {
            font.setItalic(true);
            fontChanged = true;
        }

        // Font color
        String color = extractStyle(cell, "color");
        if (!color.isEmpty()) {
            font.setColor(getHSSFColor(color));
            fontChanged = true;
        }

        // Background color (overrides row background)
        String bgColor = cell.hasAttr("bgcolor") ? cell.attr("bgcolor") : extractStyle(cell, "background-color");
        if (!bgColor.isEmpty()) {
            style.setFillForegroundColor(getHSSFColor(bgColor));
            style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        }

        // Alignment
        String align = extractStyle(cell, "text-align");
        if (align.isEmpty()) align = cell.attr("align");
        if (align.equalsIgnoreCase("left")) style.setAlignment(HorizontalAlignment.LEFT);
        else if (align.equalsIgnoreCase("right")) style.setAlignment(HorizontalAlignment.RIGHT);
        else if (align.equalsIgnoreCase("center")) style.setAlignment(HorizontalAlignment.CENTER);
        else if (align.equalsIgnoreCase("justify")) style.setAlignment(HorizontalAlignment.JUSTIFY);

        if (excelCell.getCellType() == CellType.NUMERIC) {
            style.setDataFormat(workbook.createDataFormat().getFormat("#,##0.00"));
        }

        if (fontChanged) {
            style.setFont(font);
        }
        style.setWrapText(true);
        excelCell.setCellStyle(style);
    }

    // ... [Keep all other helper methods from previous version] ...

    public static void main(String[] args) throws IOException {
        String html = "<table border='1'>" +
                     "<tr style='background-color:#EEEEEE; height:30px;'>" +
                     "  <th>Header</th><th>Second</th>" +
                     "</tr>" +
                     "<tr style='background-color:yellow;'>" +
                     "  <td>1,000.50</td><td style='background-color:white;'>Special</td>" +
                     "</tr>" +
                     "</table>";
        convert(html, "row_styles_output.xls");
    }
}