javascript:(function(){
  const loadScript = (url, callback) => {
    const script = document.createElement('script');
    script.src = url;
    script.onload = callback;
    document.head.appendChild(script);
  };

  // Create the initial UI window
  const win = window.open('', '_blank', 'width=600,height=500');
  win.document.write(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Base64 Gzip Decoder</title>
      <style>
        body { 
          font-family: Arial, sans-serif; 
          margin: 20px; 
          background: #f5f5f5; 
        }
        .container {
          background: white;
          padding: 20px;
          border-radius: 8px;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        textarea {
          width: 100%;
          height: 150px;
          padding: 10px;
          border: 1px solid #ddd;
          border-radius: 4px;
          margin-bottom: 15px;
          font-family: monospace;
          resize: vertical;
        }
        .button {
          padding: 10px 15px;
          margin-right: 10px;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          font-weight: bold;
          background: #4CAF50;
          color: white;
        }
        .button:hover {
          opacity: 0.9;
        }
        #output {
          margin-top: 20px;
          display: none;
        }
        pre {
          background: #f8f8f8;
          padding: 15px;
          border-radius: 5px;
          border: 1px solid #ddd;
          white-space: pre-wrap;
          word-break: break-word;
          max-height: 200px;
          overflow-y: auto;
        }
        .copy-btn {
          background: #2196F3;
        }
        .loading {
          display: none;
          color: #666;
          margin-top: 10px;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h2>Base64 Gzip Decoder</h2>
        <p>Paste your Base64 Gzip encoded string below:</p>
        <textarea id="input" placeholder="Paste your encoded string here..."></textarea>
        <button id="decodeBtn" class="button">Decode</button>
        <span id="loading" class="loading">Decoding, please wait...</span>
        
        <div id="output">
          <h3>Decoded Result:</h3>
          <pre id="result"></pre>
          <button id="copyBtn" class="button copy-btn">Copy to Clipboard</button>
        </div>
      </div>
      <script>
        document.getElementById('decodeBtn').addEventListener('click', function() {
          const input = document.getElementById('input').value.trim();
          if (!input) {
            alert('Please enter a Base64 encoded string');
            return;
          }
          
          document.getElementById('loading').style.display = 'block';
          document.getElementById('decodeBtn').disabled = true;
          
          try {
            // This function will be called after pako loads
            window.decodeInput = function(input) {
              try {
                const binaryString = atob(input.replace(/\\s/g, ''));
                const bytes = new Uint8Array(binaryString.length);
                for (let i = 0; i < binaryString.length; i++) {
                  bytes[i] = binaryString.charCodeAt(i);
                }
                const decompressed = pako.ungzip(bytes, { to: 'string' });

                let output;
                try {
                  // Try parsing as JSON first
                  output = JSON.parse(decompressed);
                  if (typeof output === 'string') {
                    output = JSON.parse(output); // Handle double-encoded JSON
                  }
                  output = JSON.stringify(output, null, 2);
                } catch (e) {
                  // If not JSON, try parsing as URL-encoded string
                  if (decompressed.includes('=') && decompressed.includes('&')) {
                    const params = new URLSearchParams(decompressed);
                    const obj = {};
                    params.forEach((value, key) => {
                      // Handle multiple values for same key
                      if (obj.hasOwnProperty(key)) {
                        if (Array.isArray(obj[key])) {
                          obj[key].push(value);
                        } else {
                          obj[key] = [obj[key], value];
                        }
                      } else {
                        obj[key] = value;
                      }
                    });
                    output = JSON.stringify(obj, null, 2);
                  } else {
                    output = decompressed; // Fallback to raw output
                  }
                }

                document.getElementById('result').textContent = output;
                document.getElementById('output').style.display = 'block';
                document.getElementById('loading').style.display = 'none';
                document.getElementById('decodeBtn').disabled = false;
              } catch (error) {
                document.getElementById('loading').style.display = 'none';
                document.getElementById('decodeBtn').disabled = false;
                alert('Error decoding: ' + error.message);
              }
            };
            
            // Trigger the decoding in the parent window
            window.opener.postMessage({ action: 'decode', input: input }, '*');
          } catch (error) {
            document.getElementById('loading').style.display = 'none';
            document.getElementById('decodeBtn').disabled = false;
            alert('Error: ' + error.message);
          }
        });

        document.getElementById('copyBtn').addEventListener('click', function() {
          const result = document.getElementById('result').textContent;
          navigator.clipboard.writeText(result).then(() => {
            const btn = document.getElementById('copyBtn');
            btn.textContent = 'Copied!';
            setTimeout(() => {
              btn.textContent = 'Copy to Clipboard';
            }, 2000);
          });
        });

        // Listen for messages from the parent window
        window.addEventListener('message', function(event) {
          if (event.data.action === 'decoded') {
            window.decodeInput(event.data.input);
          }
        });
      </script>
    </body>
    </html>
  `);
  win.document.close();

  // Load pako and set up message listener
  loadScript('https://cdnjs.cloudflare.com/ajax/libs/pako/2.1.0/pako.min.js', function() {
    window.addEventListener('message', function(event) {
      if (event.data.action === 'decode') {
        try {
          const binaryString = atob(event.data.input.replace(/\s/g, ''));
          const bytes = new Uint8Array(binaryString.length);
          for (let i = 0; i < binaryString.length; i++) {
            bytes[i] = binaryString.charCodeAt(i);
          }
          const decompressed = pako.ungzip(bytes, { to: 'string' });
          event.source.postMessage({ action: 'decoded', input: decompressed }, '*');
        } catch (error) {
          event.source.postMessage({ action: 'error', message: error.message }, '*');
        }
      }
    });
  });
})();