import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import java.util.Date;

public class EnhancedHtmlToExcelConverter {

    private static final DecimalFormat DECIMAL_FORMAT = (DecimalFormat) DecimalFormat.getInstance(Locale.US);
    private static final Pattern NUMERIC_PATTERN = Pattern.compile("^[+-]?\\d{1,3}(,\\d{3})*(\\.\\d+)?$");
    private static final Pattern DATE_PATTERN = Pattern.compile("^\\d{1,2}/\\d{1,2}/\\d{2,4}$");
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("MM/dd/yyyy");

    public static void convert(String html, String outputPath) throws IOException {
        Document doc = Jsoup.parse(html);
        try (HSSFWorkbook workbook = new HSSFWorkbook();
             FileOutputStream out = new FileOutputStream(outputPath)) {
            Sheet sheet = workbook.createSheet("Data");
            
            // Turn off gridlines for the sheet
            sheet.setDisplayGridlines(false);
            
            int currentRow = 0;
            for (Node node : doc.body().childNodes()) {
                if (node instanceof Element) {
                    Element element = (Element) node;
                    if (element.tagName().equals("table")) {
                        currentRow = processTable(element, sheet, workbook, currentRow);
                    } else if (isSpacingElement(element)) {
                        currentRow += getSpacing(element);
                    }
                }
            }
            workbook.write(out);
        }
    }

    private static int processTable(Element table, Sheet sheet, Workbook workbook, int startRow) {
        boolean tableHasBorder = table.hasAttr("border") && !table.attr("border").equals("0");
        int tableWidth = getTableWidth(table);
        List<CellRangeAddress> mergedRegions = new ArrayList<>();
        int firstRow = startRow;

        // First pass: process all cells and collect merged regions
        for (Element tr : table.select("tr")) {
            Row excelRow = sheet.createRow(startRow++);
            int colNum = 0;
            for (Element cell : tr.select("td, th")) {
                while (excelRow.getCell(colNum) != null) colNum++;
                Cell excelCell = excelRow.createCell(colNum);
                setCellValue(cell, excelCell);
                applyCellStyles(cell, excelCell, workbook, tableHasBorder);
                int colspan = getSpanValue(cell, "colspan");
                int rowspan = getSpanValue(cell, "rowspan");
                if (colspan > 1 || rowspan > 1) {
                    mergedRegions.add(new CellRangeAddress(
                        excelRow.getRowNum(), excelRow.getRowNum() + rowspan - 1,
                        colNum, colNum + colspan - 1
                    ));
                }
                colNum += colspan;
            }
            fillEmptyCells(excelRow, tableWidth);
        }

        // Apply merged regions
        for (CellRangeAddress region : mergedRegions) {
            sheet.addMergedRegion(region);
        }

        // Second pass: apply proper borders to all cells
        if (tableHasBorder) {
            applyTableBorders(sheet, firstRow, startRow - firstRow, tableWidth, mergedRegions);
        }

        autoSizeColumns(sheet, tableWidth);
        return startRow;
    }

    private static void applyCellStyles(Element cell, Cell excelCell, Workbook workbook, boolean applyBorders) {
        CellStyle style = workbook.createCellStyle();
        Font font = workbook.createFont();
        boolean fontChanged = false;

        // Set default font to Aptos Narrow
        font.setFontName("Aptos Narrow");
        fontChanged = true;

        // Apply font size if specified
        String fontSize = extractStyle(cell, "font-size");
        if (!fontSize.isEmpty()) {
            try {
                // Remove "px" if present and parse as float
                fontSize = fontSize.replace("px", "").trim();
                float size = Float.parseFloat(fontSize);
                font.setFontHeightInPoints((short) size);
                fontChanged = true;
            } catch (NumberFormatException e) {
                // Use default size if parsing fails
            }
        }

        if (cell.tagName().equals("th") || hasStyle(cell, "font-weight", "bold")) {
            font.setBold(true);
            fontChanged = true;
        }
        if (hasStyle(cell, "font-style", "italic")) {
            font.setItalic(true);
            fontChanged = true;
        }

        String color = extractStyle(cell, "color");
        if (!color.isEmpty()) {
            font.setColor(getHSSFColor(color, (HSSFWorkbook) workbook));
            fontChanged = true;
        }

        String bgColor = cell.hasAttr("bgcolor") ? cell.attr("bgcolor") : extractStyle(cell, "background-color");
        if (!bgColor.isEmpty()) {
            style.setFillForegroundColor(getHSSFColor(bgColor, (HSSFWorkbook) workbook));
            style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        }

        // Handle date formatting and alignment
        String cellText = cell.text().trim();
        if (isDate(cellText)) {
            try {
                Date date = DATE_FORMAT.parse(cellText);
                excelCell.setCellValue(date);
                style.setDataFormat(workbook.createDataFormat().getFormat("MM/dd/yyyy"));
                style.setAlignment(HorizontalAlignment.RIGHT);
            } catch (ParseException e) {
                excelCell.setCellValue(cellText);
            }
        } else {
            String align = extractStyle(cell, "text-align");
            if (align.isEmpty()) align = cell.attr("align");
            if (align.equalsIgnoreCase("left")) style.setAlignment(HorizontalAlignment.LEFT);
            else if (align.equalsIgnoreCase("right")) style.setAlignment(HorizontalAlignment.RIGHT);
            else if (align.equalsIgnoreCase("center")) style.setAlignment(HorizontalAlignment.CENTER);
            else if (align.equalsIgnoreCase("justify")) style.setAlignment(HorizontalAlignment.JUSTIFY);
        }

        if (excelCell.getCellType() == CellType.NUMERIC && !isDate(cellText)) {
            style.setDataFormat(workbook.createDataFormat().getFormat("#,##0.00"));
        }

        if (fontChanged) style.setFont(font);
        style.setWrapText(true);
        
        if (applyBorders) {
            style.setBorderTop(BorderStyle.NONE);
            style.setBorderBottom(BorderStyle.NONE);
            style.setBorderLeft(BorderStyle.NONE);
            style.setBorderRight(BorderStyle.NONE);
        }
        
        excelCell.setCellStyle(style);
    }

    private static boolean isDate(String text) {
        return DATE_PATTERN.matcher(text).matches();
    }

    // ... [Keep all other existing methods unchanged] ...

    public static void main(String[] args) throws IOException {
        String html = "<table border='1'>" +
                     "<tr><th style='font-size:14px'>Header</th><th style='font-size:12px'>Header 2</th></tr>" +
                     "<tr><td style='background-color:#00FF00;text-align:right'>05/15/2023</td><td>1,000.50</td></tr>" +
                     "<tr><td>Cell 1</td><td style='font-family:Aptos Narrow;font-size:11px'>Cell 2</td></tr>" +
                     "</table>";
        convert(html, "output.xls");
    }
}