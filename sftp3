import net.schmizz.sshj.SSHClient;
import net.schmizz.sshj.connection.channel.direct.Session;
import net.schmizz.sshj.sftp.SFTPClient;

public class RemoteZipExtractor {

    public static void main(String[] args) {
        String sftpHost = "your-sftp-server";
        int sftpPort = 22;
        String sftpUser = "your-username";
        String sftpPassword = "your-password";
        String remoteDirectory = "/remote/path/to/directory";
        String zipFileName = "example.zip";

        try (SSHClient ssh = new SSHClient()) {
            ssh.addHostKeyVerifier((hostname, port, key) -> true); // Skip host verification
            ssh.connect(sftpHost, sftpPort);
            ssh.authPassword(sftpUser, sftpPassword);

            // Step 1: Create folder on the SFTP server
            String folderName = zipFileName.substring(0, zipFileName.lastIndexOf('.'));
            String remoteFolderPath = remoteDirectory + "/" + folderName;

            try (SFTPClient sftp = ssh.newSFTPClient()) {
                sftp.mkdir(remoteFolderPath);
                System.out.println("Created remote folder: " + remoteFolderPath);
            }

            // Step 2: Extract the ZIP file on the server using SSH
            try (Session session = ssh.startSession()) {
                String command = String.format("unzip %s/%s -d %s", remoteDirectory, zipFileName, remoteFolderPath);
                System.out.println("Executing command: " + command);

                Session.Command cmd = session.exec(command);
                cmd.join(); // Wait for command to finish
                String output = new String(cmd.getInputStream().readAllBytes());
                String error = new String(cmd.getErrorStream().readAllBytes());

                if (!output.isEmpty()) {
                    System.out.println("Command Output: " + output);
                }
                if (!error.isEmpty()) {
                    System.err.println("Command Error: " + error);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}