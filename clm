import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.StreamSupport;

public class JsonProcessor {

    public static void main(String[] args) throws Exception {
        String json = new String(Files.readAllBytes(Paths.get("data.json")));
        ObjectMapper mapper = new ObjectMapper();
        JsonNode root = mapper.readTree(json);

        // 1) Non-USA Programs ProgramID|CountryCode
        List<String> programList = StreamSupport.stream(root.get("nonUsaPrograms").spliterator(), false)
                .map(node -> node.get("programID").asText() + "|" + node.get("countryCode").asText())
                .collect(Collectors.toList());

        // Split into chunks of 2000
        List<String> programChunks = chunkList(programList, 2000).stream()
                .map(list -> String.join("~", list))
                .collect(Collectors.toList());

        // 2) Policies: policyId|policyEffectiveDate in yyyy-MM-dd
        DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        List<String> policyList = StreamSupport.stream(root.get("usaPrograms").spliterator(), false)
                .flatMap(program -> StreamSupport.stream(program.get("policies").spliterator(), false))
                .map(policy -> {
                    String policyId = policy.get("policyId").asText();
                    String effectiveDate = LocalDateTime.parse(policy.get("policyEffectiveDate").asText(), inputFormatter)
                            .format(outputFormatter);
                    return policyId + "|" + effectiveDate;
                })
                .collect(Collectors.toList());

        // Split into chunks of 1450
        List<String> policyChunks = chunkList(policyList, 1450).stream()
                .map(list -> String.join("~", list))
                .collect(Collectors.toList());

        // 3) Counts
        int totalPrograms = programList.size();
        int totalPolicies = policyList.size();

        // Output
        System.out.println("Program Chunks:");
        programChunks.forEach(System.out::println);
        System.out.println("Policy Chunks:");
        policyChunks.forEach(System.out::println);
        System.out.println("Total Program Count: " + totalPrograms);
        System.out.println("Total Policy Count: " + totalPolicies);
    }

    // Utility method to split list into chunks
    private static <T> List<List<T>> chunkList(List<T> list, int chunkSize) {
        return IntStream.range(0, (list.size() + chunkSize - 1) / chunkSize)
                .mapToObj(i -> list.subList(i * chunkSize, Math.min(list.size(), (i + 1) * chunkSize)))
                .collect(Collectors.toList());
    }
}