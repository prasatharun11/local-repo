import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

public class HtmlToExcelDebugger {

    public static void main(String[] args) {
        // Test with very simple HTML
        String testHtml = "<table><tr><td>TEST CELL</td></tr></table>";
        String outputPath = System.getProperty("user.home") + "/Desktop/debug_output.xls";
        
        System.out.println("Starting conversion...");
        System.out.println("Output path: " + outputPath);
        
        try {
            createExcelFile(testHtml, outputPath);
            System.out.println("File creation completed.");
            
            // Verify file creation
            File outputFile = new File(outputPath);
            System.out.println("File exists: " + outputFile.exists());
            System.out.println("File size: " + outputFile.length() + " bytes");
            
        } catch (Exception e) {
            System.err.println("ERROR: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void createExcelFile(String html, String outputPath) throws IOException {
        System.out.println("\n=== RAW HTML INPUT ===");
        System.out.println(html);
        
        // Parse HTML with JSoup
        Document doc = Jsoup.parse(html);
        System.out.println("\n=== PARSED DOCUMENT ===");
        System.out.println(doc);
        
        // Extract table
        Element table = doc.select("table").first();
        if (table == null) {
            throw new IOException("CRITICAL: No table found in HTML");
        }
        
        System.out.println("\n=== TABLE STRUCTURE ===");
        System.out.println("Found " + table.select("tr").size() + " rows");
        for (Element row : table.select("tr")) {
            System.out.println("Row with " + row.select("td, th").size() + " cells");
        }
        
        // Create workbook
        try (HSSFWorkbook workbook = new HSSFWorkbook();
             FileOutputStream out = new FileOutputStream(outputPath)) {
            
            Sheet sheet = workbook.createSheet("Data");
            int rowNum = 0;
            
            System.out.println("\n=== PROCESSING ROWS ===");
            for (Element row : table.select("tr")) {
                System.out.println("Processing row " + rowNum);
                Row excelRow = sheet.createRow(rowNum++);
                int colNum = 0;
                
                for (Element cell : row.select("td, th")) {
                    String cellValue = cell.text().trim();
                    System.out.println("  Cell " + colNum + ": '" + cellValue + "'");
                    
                    Cell excelCell = excelRow.createCell(colNum++);
                    excelCell.setCellValue(cellValue);
                    
                    // Mark header cells
                    if (cell.tagName().equals("th")) {
                        CellStyle style = workbook.createCellStyle();
                        Font font = workbook.createFont();
                        font.setBold(true);
                        style.setFont(font);
                        excelCell.setCellStyle(style);
                    }
                }
            }
            
            // Auto-size columns
            if (rowNum > 0) {  // If we have at least one row
                int cols = table.select("tr").first().select("td, th").size();
                System.out.println("\nAuto-sizing " + cols + " columns");
                for (int i = 0; i < cols; i++) {
                    sheet.autoSizeColumn(i);
                }
            }
            
            System.out.println("\nWriting workbook to file...");
            workbook.write(out);
            System.out.println("Write operation completed");
        }
    }
}