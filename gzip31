function extractKeyValuePairs(queryString) {
  const params = new URLSearchParams(queryString);
  const pairs = [];

  for (const [key, value] of params.entries()) {
    pairs.push([key, value]);
  }

  return pairs;
}

$.ajaxSetup({
  beforeSend: function (jqXHR, settings) {
    const method = settings.type.toUpperCase();
    const url = new URL(settings.url, window.location.origin);

    // Step 1: Extract key-value pairs from query string
    const queryPairs = extractKeyValuePairs(url.search.slice(1));

    // Step 2: Extract key-value pairs from settings.data
    let bodyPairs = [];
    if (settings.data) {
      if (typeof settings.data === 'string') {
        bodyPairs = extractKeyValuePairs(settings.data);
      } else if (typeof settings.data === 'object') {
        for (const key in settings.data) {
          const val = settings.data[key];
          if (Array.isArray(val)) {
            val.forEach(v => bodyPairs.push([key, v]));
          } else {
            bodyPairs.push([key, val]);
          }
        }
      }
    }

    // Step 3: Combine all pairs (duplicates preserved)
    const finalPairs = [...queryPairs, ...bodyPairs];

    // Step 4: Compress and encode the array of key-value pairs
    if (finalPairs.length > 0) {
      const jsonString = JSON.stringify(finalPairs);
      const compressedData = pako.gzip(jsonString, { to: 'string' });
      const base64Data = btoa(String.fromCharCode(...compressedData));

      settings.data = base64Data;

      // Remove original query string from URL
      settings.url = url.origin + url.pathname;

      // Set headers
      jqXHR.setRequestHeader('Content-Encoding', 'gzip');
      jqXHR.setRequestHeader('Content-Transfer-Encoding', 'base64');
      jqXHR.setRequestHeader('Content-Type', 'application/json');
    }
  },

  dataFilter: function (data, type) {
    if (data && data.indexOf('sessionExpired.jsp') !== -1) {
      window.location.href = '/web/public/noauth/session.html';
    } else {
      return data;
    }
  }
});